//------------------------RESOURCE MANAGER MODULE---------------
alias funcNo R1;
alias currPid R2;

if(funcNo==ACQUIRE_DISK) then

    while([DISK_STATUS_TABLE]==1) do

        [PROCESS_TABLE+16*currPid+4] = WAIT_DISK;
        backup;
        call SCHEDULER;
        restore;

    endwhile;

    [DISK_STATUS_TABLE] = 1;
    [DISK_STATUS_TABLE+4] = currPid;

    return;
endif;

//.....Acquire Terminal.....
if(funcNo == ACQUIRE_TERMINAL) then
    while([TERMINAL_STATUS_TABLE]==1) do
        [PROCESS_TABLE+16*currPid+4] = WAIT_TERMINAL;
        //......calling scheduler
        backup;
        call SCHEDULER;
        restore;

    endwhile;

    [TERMINAL_STATUS_TABLE] = 1;	//Status
    [TERMINAL_STATUS_TABLE+1] = currPid;

    return;
endif;

//....Release Terminal.....
alias ret R0;
if(funcNo == RELEASE_TERMINAL) then
    if(currPid!=[TERMINAL_STATUS_TABLE+1]) then
        ret = -1;
        return;
    endif;

    [TERMINAL_STATUS_TABLE] = 0;
    alias i R5;
    i=0;
    while(i<16) do
        if([PROCESS_TABLE+16*i+4]==WAIT_TERMINAL) then
            [PROCESS_TABLE+16*i+4] = READY;
            endif;
        i = i+1;
    endwhile;

    ret = 0;

    return;
endif;


//.........ACQUIRE SEMAPHORE.....
if(funcNo == ACQUIRE_SEMAPHORE) then
    alias freeIdx   R11;
    alias i         R12;

    freeIdx = -1;
    i = 0;

    while(i<32) do
        if([SEMAPHORE_TABLE + 4*i + 1] == 0)    then
            freeIdx = i;
            break;
        endif;

        i = i+1;
    endwhile;

    if(freeIdx == -1)   then
        R0 = -1;
        return;
    endif;

    [SEMAPHORE_TABLE+freeIdx*4+0] = -1;
    [SEMAPHORE_TABLE+freeIdx*4+1] = 1;

    R0 = freeIdx;
    return;
endif;

//............RELEASE_SEMAPHORE........
if(funcNo == RELEASE_SEMAPHORE) then

    alias semTableIdx R13;
    semTableIdx = R13;

    if(semTableIdx<0 || semTableIdx>31) then
        R0 = -1;
        return;
    endif;

    if([SEMAPHORE_TABLE+4*semTableIdx+0]==[SYSTEM_STATUS_TABLE+1])  then
        [SEMAPHORE_TABLE+4*semTableIdx+0] = -1;
        alias i R14;
        i = 0;

        while(i < 16)   do
            if([PROCESS_TABLE+16*i+4] == WAIT_SEMAPHORE && [PROCESS_TABLE+16*i+5] == semTableIdx)   then
                [PROCESS_TABLE+16*i+4] = READY;
            endif;

            i = i+1;
        endwhile;
    endif;

    [SEMAPHORE_TABLE+4*semTableIdx+1] = [SEMAPHORE_TABLE+4*semTableIdx+1] - 1;
    R0 = 0;
    return;
endif;

//..............ACQUIRE INODE
if(funcNo == ACQUIRE_INODE) then
  alias inodeIdx R3;

  while( [FILE_STATUS_TABLE + 4*inodeIdx + 0] != -1)  do
    [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE+1] + 4] = WAIT_FILE;
    [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE+1] + 5] = inodeIdx;

    backup;
    call MOD_5;
    restore;
    endwhile;

    if([INODE_TABLE+16*(inodeIdx)+1] == -1) then
      R0 = -1;
      return;
    endif;

    [FILE_STATUS_TABLE + 4*inodeIdx+0] = currPid;

    R0 = 0;
    return;
endif;

//..................RELEASE INODE
if( funcNo == RELEASE_INODE)  then
  alias inodeIdx R3;

  if(currPid != [FILE_STATUS_TABLE + 4*inodeIdx + 0]) then
    R0 = -1;
    return;
  endif;

  [FILE_STATUS_TABLE + 4*inodeIdx + 0] = -1;

  alias i R4;
  i =0 ;
  while( i<=15)  do
    if( ([PROCESS_TABLE + 16*i + 4] ==WAIT_FILE) && ([PROCESS_TABLE + 16*i+ 5]==inodeIdx) ) then
      [PROCESS_TABLE + 16*i + 4] = READY;
    endif;
    i = i+1;
  endwhile;

  R0 = 0;
  return;
endif;
