//---------------PROCESS MANAGER MODULE-------------------

alias funcNo R1;
alias currPid R2;

if(funcNo == GET_PCB_ENTRY) then

    alias i R3;
    i = 0;
    while(i < 16) do
        if([PROCESS_TABLE + 16*i + 4] == TERMINATED) then
            [PROCESS_TABLE + 16*i + 1] = i;     //PID
            [PROCESS_TABLE + 16*i + 4] = ALLOCATED;     //STATE
            [PROCESS_TABLE + 16*i + 14] = PAGE_TABLE_BASE + 20*i;     //PTBR
            [PROCESS_TABLE + 16*i + 15] = 10;     //PTLR
            break;
        endif;
        i = i + 1;
    endwhile;

    if(i == 16) then
        R0 = -1;
    else
        R0 = i;
    endif;

    return;

endif;

if(funcNo==FREE_PAGE_TABLE) then

    alias i R3;

    //.....page table entries invalide........//

    [PTBR + 0] = -1;
	[PTBR + 1] = "0000";

	[PTBR + 2] = -1;
	[PTBR + 3] = "0000";

    i = 2;
    while(i<10) do
        if([PTBR+2*i]!=-1)then

            multipush(R1,R2,R3);
            R1 = RELEASE_PAGE;
            R2 = [PTBR + 2*i];         //page_number
            call MEMORY_MANAGER;
            multipop(R1,R2,R3);

            [PTBR+2*i] = -1;
            [PTBR+2*i+1] = "0000";

        endif;
        i = i+1;
    endwhile;

    //......disk_map_table entries invalidate........//
    i = 2;
    while(i<10) do

        if(i==2 || i==3 || i==8 || i==9) then   //heap and stack pages
            if([DISK_MAP_TABLE + 10*R2 + i]!=-1) then

                multipush(R1,R2,R3);
                R1 = RELEASE_BLOCK;
                R2 = [DISK_MAP_TABLE + 10*R2 + i];
                call MEMORY_MANAGER;
                multipop(R1,R2,R3);

            endif;

        endif;

        [DISK_MAP_TABLE + 10*R2 + i] = -1;      //invalidate dis_map_table entries

        i = i+1;
    endwhile;

    return;
endif;

if(funcNo==FREE_USER_AREA_PAGE) then

    alias UAPage R3;
    UAPage = [PROCESS_TABLE + 16*currPid + 11];

    alias i R4;
    i = 496;

    while(i<512)    do
        if([UAPage*512 + i] == SEMAPHORE)   then

            backup;
            R1 = RELEASE_SEMAPHORE;
            R2 = currPid;
            R3 = [UAPage*512 + i + 1];

            call MOD_0;         //RESOURCE MANAGER MODULE

            restore;
        endif;

        if([UAPage*512 + i] == FILE)   then

            backup;
            R1 = CLOSE;
            R2 = currPid;
            R3 = [UAPage*512 + i + 1];

            call MOD_0;         //RESOURCE MANAGER MODULE

            restore;
        endif;
        i = i+2;
    endwhile;

    backup;
    R1 = RELEASE_PAGE;
    R2 = [PROCESS_TABLE + 16*currPid + 11];         //page_number
    call MEMORY_MANAGER;

    restore;

    return;
endif;

if(funcNo==EXIT_PROCESS) then

    if([PROCESS_TABLE + 16*currPid + 9] != 9)   then
        alias i R3;
        i=0;

        while(i < 16)   do
            if(([PROCESS_TABLE+16*i+4] == WAIT_PROCESS) && ([PROCESS_TABLE+16*i+5] == currPid)) then
                [PROCESS_TABLE+16*i+4] = READY;
            endif;

            if([PROCESS_TABLE+16*i+2] == currPid)   then
                [PROCESS_TABLE+16*i+2] = -1;
            endif;

            i = i+1;
        endwhile;
    endif;

    multipush(R1,R2);
    R1 = FREE_PAGE_TABLE;
    R2 = currPid;
    call PROCESS_MANAGER;
    multipop(R1,R2);

    multipush(R1,R2);
    R1 = FREE_USER_AREA_PAGE;
    R2 = currPid;
    call PROCESS_MANAGER;
    multipop(R1,R2);

    [PROCESS_TABLE+16*currPid+4] = TERMINATED;

    return;
endif;
