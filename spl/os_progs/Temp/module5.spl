
//-----------------------SCHEDULER------------------------//

///////////////////////////////////////////////////////////
//////////////////////get cur process id///////////////////
///////////////////////////////////////////////////////////

alias curID R0;
curID = [SYSTEM_STATUS_TABLE+1];

multipush(BP);

////////////////////////////////////////////////////////////
////////saving cur process context in process table/////////
////////////////////////////////////////////////////////////

alias cur_pro_entry R1;
cur_pro_entry = PROCESS_TABLE + 16*curID;

[cur_pro_entry+12] = SP%512;
[cur_pro_entry+14] = PTBR;
[cur_pro_entry+15] = PTLR;

/////////////////////////////////////////////////////////////
////////////////////process switching////////////////////////
/////////////////////////////////////////////////////////////

alias newID R4;
alias tmpID R5;
alias temp R6;

newID = 0;
tmpID = 1;

while(tmpID < curID)	do
	
	temp = [PROCESS_TABLE + (tmpID * 16) + 4];
	
	if( (temp == READY) || (temp == CREATED) )	then
		newID = tmpID;
		break;
	endif;

	tmpID = tmpID + 1;

endwhile;

tmpID = curID + 1;

while(tmpID < 16)	do
	
	temp = [PROCESS_TABLE + (tmpID * 16) + 4];
	
	if( (temp == READY) || (temp == CREATED) )	then
		newID = tmpID;
		break;
	endif;

	tmpID = tmpID + 1;

endwhile;

//////////////////////////////////////////////////////////////
//////////restoring other process(scheduled) context//////////
//////////////////////////////////////////////////////////////

alias new_pro_entry R7;
new_pro_entry = PROCESS_TABLE + 16*(newID);


SP = ([new_pro_entry + 11]*512) + [new_pro_entry + 12];

PTBR = [new_pro_entry + 14];
PTLR = [new_pro_entry + 15];

[SYSTEM_STATUS_TABLE + 1] = newID;

if( [new_pro_entry + 4] == CREATED )	then
	
	SP = [new_pro_entry + 13];
	BP = [[new_pro_entry + 11]*512];

	[new_pro_entry + 4] = RUNNING;
	[new_pro_entry + 9] = 0;

	ireturn;

endif;

[new_pro_entry + 4] = RUNNING;

multipop(BP);

return;